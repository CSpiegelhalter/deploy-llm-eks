name: Build, Push, and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8s/apps/fastapi-gateway/**'
      - '.github/workflows/ci-build-deploy.yml'

permissions:
  id-token: write     # required for OIDC -> AWS
  contents: write     # required to push the bumped values.yaml

jobs:
  build-push-deploy:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPO: fastapi-model
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubOIDCRole

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push FastAPI image
        run: |
          set -euo pipefail
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}
          docker build -t ${ECR_URI}:${GITHUB_SHA} ./app
          docker push ${ECR_URI}:${GITHUB_SHA}
          echo "ECR_URI=${ECR_URI}" >> $GITHUB_ENV

      - name: Argo CD Login
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN:  ${{ secrets.ARGOCD_TOKEN }}
        run: |
          # --grpc-web is often needed behind ALB; --insecure if you use HTTP
          argocd login "$ARGOCD_SERVER" --sso --grpc-web --insecure --auth-token "$ARGOCD_TOKEN"

      - name: Argo CD Set Image Params and Sync
        run: |
          run: |
          set -euo pipefail
          # Update Helm params on the Application (no repo edits)
          argocd app set fastapi-gateway \
            --grpc-web --insecure \
            --helm-set image.repository="${ECR_URI}" \
            --helm-set image.tag="${GITHUB_SHA}"

          # Sync & wait for health
          argocd app sync fastapi-gateway --grpc-web --insecure --timeout 600 --prune
          argocd app wait fastapi-gateway --grpc-web --insecure --health --timeout 600


